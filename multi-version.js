#!/usr/bin/env node

const _ = require('lodash');
const fs = require('fs-extra');
const path = require('path');
const downloadPackage = require('download-npm-package');
const endOfLine = require('os').EOL;

const cedarPackages = require(path.resolve(__dirname, 'cedar-packages.json'));

const packageDirectory = path.resolve(__dirname, `cedar-packages`);

function main() {
  //clean the directory
  fs.removeSync('${packageDirectory}');

  // go through each package
  for (let p in cedarPackages) {
    console.log(`Getting ${p}...`);
    let versions = cedarPackages[p];
    downloadPackages(p, versions);
    createJsIndex(p, versions);
    createScssIndex(p, versions);
  }

  console.log('Done');
}

/**
 * 
 * @param {String} packageName -- full name of the package to get (i.e. @rei/cdr-button)
 * @param {Array} versions -- array of versions to download (i.e. [0.1.0, 1.0.0])
 * 
 * Uses download-npm-packages to download the given package at the given versions and cleans up the
 * directory structure
 */
function downloadPackages(packageName, versions) {
  versions.forEach((version) => {
    // path/to/cedar-packages/<package without @rei/>/<version>
    const versionDir = path.resolve(packageDirectory, `${packageName.split('/')[1]}`, `${version}`);
    downloadPackage({
      arg: `${packageName}@${version}`,
      dir: versionDir,
    }).then(() => {
      // installed packages have a lot of files we don't care about, just move files from the dist folder
      fs.moveSync(path.resolve(versionDir, packageName, `dist`), versionDir);
      fs.removeSync(path.resolve(versionDir, `@rei`));
    });
  });
}

/**
 * 
 * @param {String} packageName -- full name of the package to get (i.e. @rei/cdr-button)
 * @param {Array} versions -- array of versions to download (i.e. [0.1.0, 1.0.0])
 * 
 * Create an index file to easily import components from
 */
function createJsIndex(name, versions) {
  let contents = `//File generated by /multi-version.js ${endOfLine}${endOfLine}`;
  let components = [];
  // @rei/cdr-button -> cdr-button 
  const strippedName = name.split('/')[1];
  // cdr-button -> CdrButton
  const compName = _.upperFirst(_.camelCase(strippedName));

  versions.forEach((v) => {
    //imports
    //CdrButton0.1.0 -> CdrButton010
    const compNameVersion = `${compName}${v.replace(/\./gi, '').replace(/\-/gi, '')}`;
    const compDir = path.resolve(packageDirectory, `${strippedName}`, `${v}`, `${strippedName}.js`);
    contents += `import { ${compName} as ${compNameVersion} } from '${compDir}';${endOfLine}`;
    components.push(compNameVersion);
  });

  //exports
  contents += `
export default {
  ${components.join(`,${endOfLine}  `)}
}`;

  //output
  fs.outputFileSync(path.resolve(packageDirectory, strippedName, 'index.js'), contents);
}

/**
 * 
 * @param {String} packageName -- full name of the package to get (i.e. @rei/cdr-button)
 * @param {Array} versions -- array of versions to download (i.e. [0.1.0, 1.0.0])
 * 
 * Create and index file for easily importing css files
 */
function createScssIndex(name, versions) {
  // @rei/cdr-button -> cdr-button 
  const strippedName = name.split('/')[1];
  let contents = `//File generated by /multi-version.js ${endOfLine}${endOfLine}`;

  versions.forEach((v) => {
    const cssPath = path.resolve(packageDirectory, strippedName, v, `${strippedName}.css`)
    //imports
    contents += `@import '${cssPath}';${endOfLine}`;
  });

  //output
  fs.outputFileSync(path.resolve(packageDirectory, strippedName, 'index.scss'), contents);
}

main();
